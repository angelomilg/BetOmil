QUIERO QUE ACTÚES COMO:
- Tipster profesional orientado a datos y transparencia.
- Desarrollador senior full-stack con Next.js (App Router) + TypeScript + Tailwind + shadcn/ui, Firebase, Stripe y Recharts.

PROYECTO
- Nombre de la web: **BetOmil**.
- Propósito: Plataforma para apostadores y tipsters que permite registrar apuestas, analizar rendimiento, seguir tipsters y, en premium, importar tickets vía OCR/Bot.
- Idioma: Español (España).
- Zona horaria: Europe/Madrid.

ESTILO VISUAL Y TONO (MUY IMPORTANTE)
- Estética: **profesional**, limpia y **visual** (datos primero), **sin parecer anuncio**.
- Paleta (dark por defecto):
  - Fondo: `#0B0B0C`
  - Superficies: `#131315`, `#1A1B1E`
  - Texto principal: `#F2F2F3`
  - Texto secundario: `#B9BBC1`
  - Acento principal: `#4EAB8B` (verde sobrio)
  - Acento secundario: `#7AA6FF` (azul suave) — uso mínimo
  - Bordes/divisores: `#24262A`
- Tipografía: sistema (Inter/variante sistema). Jerarquía clara (xl títulos, base texto).
- Componentes: tarjetas con radios 16–20px, sombras suaves, gráficos simples y legibles.
- Tono de copy: directo, basado en **datos y utilidad**, nada de claims grandilocuentes.

BRANDING BÁSICO
- Logotipo textual simple “BetOmil” (sin eslógan), versión clara y oscura.
- Favicon e icono en navbar (monograma “B” minimal).
- Metadatos SEO (title/description), OpenGraph y Twitter con portada oscura y tipografía limpia.

STACK TÉCNICO
- Next.js 14+ (App Router), TypeScript, `/src` structure.
- TailwindCSS + shadcn/ui + lucide-react.
- Recharts para gráficos.
- Firebase Auth (email + Google/Apple), Firestore, Storage.
- Stripe (suscripciones) y Stripe Connect (tipsters). Si no hay claves: mocks + `.env.example`.
- OCR: interfaz preparada (driver) para Google Cloud Vision o Tesseract con **mocks** si no hay claves.
- Deployment preparado para Vercel.

MODO DE TRABAJO (OBLIGATORIO)
- **Iterativo**: al terminar cada **fase/página**, **DETENTE** y pregúntame: “¿Continuamos con la siguiente sección?” No sigas hasta que responda “Sí”.
- Cada entrega debe incluir:
  1) Árbol de archivos creados/modificados con rutas.
  2) **Código completo** de cada archivo (no fragmentos).
  3) Comandos para ejecutar (pref. `pnpm`).
  4) Pasos de prueba manual (qué ver/clicar).
  5) `.env.example` actualizado y notas de configuración.

SITEMAP/RUTAS
PÚBLICO:
- `/` Home
- `/tipsters` Explorador de tipsters + filtros
- `/rankings` Ranking & comparador (hasta 3 tipsters)
- `/picks` Muestras de picks públicos (histórico con retardo)
- `/precios` Planes y beneficios
- `/como-funciona` (OCR/Bot)
- `/blog` y `/blog/[slug]`
- `/soporte` (FAQ + contacto)
- `/legal/terminos`, `/legal/privacidad`, `/legal/cookies`, `/legal/juego-responsable`
- `/status` (estado del servicio/changelog breve)

AUTENTICADO — APOSTADOR:
- `/app` Panel (KPIs + equity/banca + alertas)
- `/app/apuestas` Registro manual, importación OCR, historial, edición
- `/app/estadisticas` Básicas y Avanzadas (premium) con filtros guardables
- `/app/banca` Gestión de bank(s) y movimientos
- `/app/seguimiento` Tipsters seguidos (feed + alertas)
- `/app/objetivos` Metas/hábitos/recordatorios
- `/app/exportar` CSV/XLSX
- `/app/integraciones` Vincular Telegram/WhatsApp (mock) + historial de procesados
- `/app/cuenta` Perfil (moneda, zona horaria), privacidad y suscripción/facturas

AUTENTICADO — TIPSTER:
- `/pro` Panel tipster (KPIs, drawdown, salud de perfil)
- `/pro/publicar` Flujo de publicar pick (bloqueo post-publicación)
- `/pro/picks` Gestión (abiertos/cerrados/void) + auditoría (historial inmutable)
- `/pro/clientes` Suscriptores, mensajes broadcast (texto/links)
- `/pro/tienda` Planes y landing pública del tipster
- `/pro/pagos` KYC, informes (Stripe Connect mock)

ADMIN (estructura + mocks):
- `/admin/moderacion`, `/admin/tipsters`, `/admin/auditoria`, `/admin/cms`, `/admin/finanzas`, `/admin/config`

MÉTRICAS/FÓRMULAS UI (para datos fake/mocks)
- Beneficio apuesta = resultado * stake * (cuota − 1) con resultado ∈ {1, 0, −1}.
- ROI = Beneficio / Σ stakes.
- Yield = Beneficio / Σ riesgo (≈ ROI si riesgo=stake).
- WinRate = aciertos / total.
- CLV (opcional) = (cuota cierre − cuota tomada) / cuota cierre.
- Mostrar siempre tamaño de muestra y periodo (30/90/365/Lifetime).

REGLAS DE NEGOCIO (RESUMEN)
- Picks no editables tras publicar (solo nota pública con timestamp).
- Ranking con mínimos (n.º picks y antigüedad) para aparecer.
- Premium gate: OCR, estadísticas avanzadas, exportaciones, comparador completo, alertas en tiempo real.
- Cumplimiento legal: páginas de legales visibles y “Juego responsable”.

DATOS (MODELO FIRESTORE SIMPLE)
- `users`, `banks`, `bets`, `picks`, `followers`, `subscriptions`, `stats_snapshots`, `audit_logs`, `content` (ver estructura estándar).

DISEÑO/UX — GUÍAS
- “Datos primero”: KPIs claros arriba, gráficos legibles debajo.
- Nada de claims comerciales agresivos; tono informativo y confiable.
- Filtros guardables, estados vacíos con explicaciones y atajos.
- Accesibilidad: WCAG 2.1 AA, focus states visibles.

FASES (DETENTE SIEMPRE AL FINAL DE CADA UNA)
1) **Fase 1 — Scaffold + Home `/`**  
   - Proyecto Next.js configurado (Tailwind + shadcn/ui + paleta/tema).
   - Layout con Navbar (logo BetOmil, navegación pública) y Footer.
   - Home con secciones:
     - Héroe: valor claro (“Analiza y automatiza tus apuestas sin humo”).
     - Beneficios (Registro, Estadísticas pro, Seguimiento, OCR Premium).
     - “Cómo funciona” (3 pasos con mini-diagrama).
     - Métricas/Confianza (placeholders).
     - CTA final (Empieza gratis / Ver planes).
   - SEO básico y dark por defecto.
   - Entregar: archivos, código, comandos, pasos de prueba, `.env.example`.
   - **DETENTE y pregunta si continuamos.**

2) **Fase 2 — Páginas públicas**  
   - `/tipsters` (tabla filtrable, mock data).
   - `/rankings` (ranking + comparador hasta 3 tipsters con Recharts).
   - `/picks` (histórico público con retardo y detalle de pick).
   - `/precios` (Gratis, Premium, Tipster Pro; bullets sobrios).
   - `/como-funciona` (flujo OCR/Bot con esquema SVG/ASCII).
   - `/blog` + `/blog/[slug]` (MDX o mock).
   - `/soporte` (FAQ + formulario simple).
   - `/legal/*` (plantillas base), `/status` (changelog/uptime simulado).
   - **DETENTE y pregunta.**

3) **Fase 3 — Auth + estructura app**  
   - Firebase Auth (email/Google/Apple), `/login`, `/registro`.
   - Rutas protegidas `/app` y `/pro` con guardas.
   - Componentes `PlanGate` y `ProtectedRoute`.
   - **DETENTE y pregunta.**

4) **Fase 4 — Panel Apostador**  
   - `/app` KPIs + equity/banca (Recharts) + alertas.
   - `/app/apuestas` (form manual + lista + edición).
   - `/app/estadisticas` (básicas con filtros guardables).
   - `/app/banca` (cuentas, movimientos).
   - **DETENTE y pregunta.**

5) **Fase 5 — Premium Apostador**  
   - `/app/estadisticas` avanzadas (equity, drawdowns, volatilidad, CLV).
   - `/app/exportar` CSV/XLSX.
   - `/app/integraciones` (vínculo Telegram/WhatsApp mock + historial).
   - `/app/seguimiento` (feed tipsters seguidos + alertas).
   - **DETENTE y pregunta.**

6) **Fase 6 — Tipster Pro**  
   - `/pro` KPIs/drawdown/salud.
   - `/pro/publicar` (bloqueo, timestamp, hash/registro cambios).
   - `/pro/picks` gestión y auditoría.
   - `/pro/tienda` planes + landing pública tipster (ruta `/t/[handle]`).
   - `/pro/clientes` y `/pro/pagos` (Stripe Connect mock).
   - **DETENTE y pregunta.**

7) **Fase 7 — Stripe & Suscripciones**  
   - Planes plataforma y de tipster, checkout y portal de facturación.
   - Webhooks simulados si no hay claves.
   - **DETENTE y pregunta.**

8) **Fase 8 — OCR/Bot (mocks)**  
   - UI de importación de imagen (drag&drop), pipeline: extraer → revisar dudas → confirmar → guardar.
   - Historial de importaciones (ok / requiere revisión / rechazado).
   - Esqueleto webhook Telegram/WhatsApp (solo mock).
   - **DETENTE y pregunta.**

9) **Fase 9 — Admin (mocks)**  
   - Moderación, verificación tipsters, auditoría, CMS simple, finanzas (MRR/churn fake).
   - **DETENTE y pregunta.**

COMANDOS PREFERIDOS
- Usa `pnpm`. Si no, `npm`. Indica claramente cuál y cómo correr: `pnpm i` + `pnpm dev`.

ENTREGABLES TRANSVERSALES
- `README.md` con instrucciones locales y despliegue en Vercel.
- `.env.example` con todas las variables esperadas (Firebase, Stripe, OCR, etc.).
- Tests mínimos en componentes críticos si procede.

RECORDATORIO FINAL
- **Tras completar la Home (Fase 1), detente y pregúntame si seguimos.**
